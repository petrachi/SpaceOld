<html>
	<head>
		<title>uio</title>
		
		<%= stylesheet_link_tag "application", :media => "all" %>	
		<%= javascript_include_tag "application" %>
	
	</head>
	<body>


<style type="text/css">

	@-webkit-keyframes tournez{
	from{
	   -webkit-transform: perspective(800px) rotateX(-15deg) rotateY(0deg);
	  }
	  to {
	    -webkit-transform: perspective(800px) rotateX(-15deg) rotateY(360deg);
	  }
	}



	.planet{ background-color: rgba(120, 255, 120, 0.85); height: 300px; width: 300px; position: relative;
		-webkit-transform: perspective(600px) rotateX(-15deg) rotateY(0deg); 
		-webkit-transform-style: preserve-3d;
		
		-webkit-transition: -webkit-transform 1s;
		
	
		-webkit-transform-origin: 50% 50%;
		
		-webkit-animation: tournez 20s linear infinite;
		
		-webkit-animation-fill-mode: both;
		
		
	/*	-webkit-transform: perspective(500px) translate3d(0px, 0px, 109px) rotate3d(0.51, 1, 0, 57deg);
	*/
	
	
	
	
	/*	-webkit-transform-style: preserve-3d;
		-webkit-transform: translateZ(-100px) rotateX( -220deg ) rotateY( 45deg );*/
		/*
		-webkit-transform: rotateX(-45deg) perspective(288);
		*/
		/**/
		}
		.cont{
			height:300px;
			width:300px;
			margin: 1em;
		}
		.cont:hover .planet{
			-webkit-animation-play-state:paused;
			
			
		/*	-webkit-transform: perspective(600px) rotateX(0deg) rotateY(0deg) !important;  */
			
		}
		
		.province{ border: 1px solid blue; background:skyblue; border-radius: 0px; height: 10px; width: 10px;
			
			-webkit-transform-origin: 50% 50%;
			
			
			position: absolute;
			left: 150px;
			top: 150px;
			
			
		/*	-webkit-transform: perspective(570px) rotateY(46deg) rotateX(44deg) translateZ(96px);*/
			} 
			
			.province:hover{
				background:red;
			}
			
			
		/*	#planet:hover .province{ -webkit-transform: translateZ(100px); } */
</style>

<%#= container do %>
	<%#= one_col_row do %>
		<%#= @planet.name %>
	<%# end %>
	
	<%#= one_col_row do %>
		<%#= raw @planet.to_3d_transform %>
	<%# end %>
<%# end %>

<%
def point_on_sphere n
  n = n.to_f
  pts = []
  
  inc = Math::PI * (3 - Math::sqrt(5))
  off = 2 / n
  
  (0...n).each do |k|
    
    
    y = k * off - 1 + (off / 2)    
    r = Math::sqrt(1 - y**2)
    phi = k * inc
    

	p "intersting values : phi #{phi} / r #{r}, y #{y}"

	p "cartesian in generation"
	p [Math::cos(phi)*r, y, Math::sin(phi)*r]
	
	p "-------------"

    pts << [Math::cos(phi)*r, y, Math::sin(phi)*r]
  end
  
  pts
end


def point_on_sphere_for_sphere n
  n = n.to_f
  pts = []
  
  inc = Math::PI * (3 - Math::sqrt(5))
  off = 2 / n
  
  (0...n).each do |k|
    
    
    y = k * off - 1 + (off / 2)    
    r = Math::sqrt(1 - y**2)
    phi = k * inc
    

	p "intersting values : phi #{phi} / r #{r}, y #{y}"

	p "cartesian in generation"
	p [Math::cos(phi)*r, y, Math::sin(phi)*r]
	
	p "-------------"

   # pts << [Math::cos(phi)*r, y, Math::sin(phi)*r]

	x_phi = Math::PI/2 - Math::acos(y)

	pts << [1.0, phi, x_phi]

  end
  
  pts
end





def arcsin(x)
	Math.atan2(x, Math.sqrt(1.0 - x**2))
end

def arccos(x)
	Math.atan2(Math.sqrt(1.0 - x*x), x)	
end

def coord_cart_to_spher x, y, z
	p = Math::sqrt(x**2 + y**2 + z**2)
	ϕ = arccos(z / p)
	
	ϕ = 0 if ϕ.nan?
	
	θ = if y >= 0
		arccos(x / Math::sqrt(x**2 + y**2))
	else
		(2 * Math::PI) - arccos(x / Math::sqrt(x**2 + y**2))
	end
	
	θ = 0 if θ.nan?
	
	#p p, ϕ, θ
	
	return p, ϕ, θ
end

def special_for_3d p, ϕ, θ
	return p, ϕ, θ
end

def spher_to_cart p, ϕ, θ
	x = p * Math.cos(θ) * Math.sin(ϕ)
	y = p * Math.sin(θ) * Math.sin(ϕ)
	z = p * Math.cos(ϕ)
	
	return x,y,z
end


#def coord_cart_to_spher(x, y, z); p = Math::sqrt(x**2 + y**2 + z**2); ϕ = arccos(z / p); θ = if y >= 0; arccos(x / Math::sqrt(x**2 + y**2)); else; (2 * Math::PI) - arccos(x / Math::sqrt(x**2 + y**2)); end; return p, ϕ, θ; end

n = 650
a = point_on_sphere(n)
r = 130

#b = a.map{|x| coord_cart_to_spher(*x) }


c = point_on_sphere_for_sphere(n)

#p "ok"
#p c==a
#p a.first, b.first, c.first


#a = [[-1,0,0]]
b = a.map{|x| 
	
	p "cartesien #{x}"
	p "sphere #{coord_cart_to_spher(*x)}"
	p "------"
	coord_cart_to_spher(*x) 
	
	
	}

a = b = [] 





 %>

<div class="cont">
<div class="planet">
	<% c.each do |(p, ϕ, θ)| %>
		<div class="province" style="-webkit-transform: rotateY(<%= ϕ %>rad) rotateX(<%= θ %>rad) translateZ(<%= p * r %>px) rotate(-30deg);"></div>
	<% end %>
</div>
</div>


<br/><br/><br/>
---
<br/><br/><br/>


<span class="rotate30 btn orange">
	rotate y +10
</span>

<span class="rotatem30 btn orange">
	rotate y -10
</span>
<br/>
y:
<span class="y">
	0
</span>
<br/>
<span class="rotatex30 btn orange">
	rotate x +10
</span>

<span class="rotatexm30 btn orange">
	rotate x -10
</span>
<br/>
x:
<span class="x">
	-10
</span>

<br/><br/>
<span class="rotate btn">
	GO !
</span>

<script>
	rotay = 0
	rotax = -10
	$(".rotate30").click(function(){
		rotay = rotay + 10;
		
		$(".y").html(rotay)
	});
	$(".rotatem30").click(function(){
		rotay = rotay - 10;
		$(".y").html(rotay)
	});
	$(".rotatex30").click(function(){
		rotax = rotax + 10;
		$(".x").html(rotax)
	});
	$(".rotatexm30").click(function(){
		rotax = rotax - 10;
		$(".x").html(rotax)
	});
	
	
	
	$(".rotate").click(function(){
		
		$(".planet").css("-webkit-transform", "perspective(600px) rotateX(" + rotax + "deg) rotateY(" + rotay + "deg)")
	});
</script>


</body>
</html>