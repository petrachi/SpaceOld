

<% 	

def make_chromosome
  value = []
  length = @search_value.size
  length.times { value << random_gene }
  [nil, value.join]
end

def random_gene
  @genes[rand(@genes.size)]
end

def make_population
  population = []
  @population_size.times { population << make_chromosome }
  population
end

def score_population
  evaluate_population
  normalize_population_score
end

def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end

def evaluate(phrase)
  score = 0
  phrase.split(//).each_with_index do |character, index|
    score += 1 if @search_value[index] == character
  end
  score
end

def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end

def next_generation
  mating_pool = create_mating_pool
  pool_size = mating_pool.size
  @population = []
  @population_size.times do
    parent1 = mating_pool[rand(pool_size)]
    parent2 = mating_pool[rand(pool_size)]
    @population << crossover(parent1, parent2)
  end
end

def create_mating_pool
  mating_pool = []
  @population.each do |person|
    person.first.to_i.times { mating_pool << person }
  end
  mating_pool
end

def crossover(parent1, parent2)
  point = rand(1..@search_value.size)
  child = parent1.last[0...point] + parent2.last[point..-1]
  [nil, mutate(child)]
end

def mutate(phrase)
  @search_value.size.times do |index|
    phrase[index] = random_gene if rand < @mutation_rate
  end
  phrase
end

def solution_found
  found = false
  @population.each do |person|
    if person.last == @search_value
		found = true 
	end
  end
  found
end



@search_value = "Mon royaume pour un cheval"
@genes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ "



@population_size = 100
@mutation_rate = 1.0 / 100
@population = make_population

@bests = []

1000.times do |generation|
  	score_population

	if generation % 1 == 0
		@bests << @population.sort{ |x| -x.first }.first

		p "gen #{generation} - b score #{evaluate @bests.last.last}"
	end
	
	if solution_found
		@bests << @population.sort_by{ |x| -x.first }.first
		break
	end
  	
	next_generation
end
%>

<hr/>
To find : <%= @searched_genes %>
<hr/>

<% @bests.each_with_index do |person, i| %>
	<div>
		<%= person.last %> - Score <%= evaluate person.last %> - Gen <%= i %>
	</div>
<% end %>
