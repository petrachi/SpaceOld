<% 
	def make_gene
		@available_genes.sample
	end
	
	def make_person genes = []
		if genes.blank?
			@search_value.size.times{ genes << make_gene }
		end
		
		{:genes => genes.clone, :muted => genes.clone}
	end
	
	
	def evaluate_person person
		score = 0
		person[:genes].zip(@search_value).each_with_index do |(gene, searched_gene), index|
			if gene == searched_gene
				score += 1
			end
			
			if rand < @mutation_rate
				person[:muted][index] = make_gene
			end
		end
		
		person[:score] = score
	end
	
	
	def mutate_person person
		make_person person[:muted]
	end
	
	@searched_image = ChunkyPNG::Image.from_file("app/assets/images/blog/experience/octopusnocolor.png")
	
	@search_value = @searched_image.pixels
	@available_genes = @searched_image.pixels.uniq
	
	@population_size = 100
	@mutation_rate = 1.0 / 1_000
	
	@bests_of_populations = []
	
	GC.enable
	
	@person = make_person
	10_000.times do |generation|
		
		
		
		
		evaluate_person @person

		mutation = mutate_person @person
		evaluate_person mutation
		
		
		if generation % 100 == 0
			@bests_of_populations << @person
			p "Generation #{generation} - score #{@person[:score]}/#{@search_value.size}"
		end
		
		
		if mutation[:score] > @person[:score]
			@person = make_person mutation[:genes]
		else
			@person = make_person @person[:genes]
		end
		
		
		
		break if @person[:score] == @search_value.size
		
		
		
	end
	
	
%>



<% 

		def asset_data_uri path
			asset = Rails.application.assets.find_asset path

		  	throw "Could not find asset '#{path}'" if asset.nil?

		  	base64 = Base64.encode64(asset.to_s).gsub(/\s+/, "")
		  	"data:#{asset.content_type};base64,#{Rack::Utils.escape(base64)}"
		end

		def genes_to_uri genes
			png = ChunkyPNG::Image.new(@searched_image.width, @searched_image.height, genes)
			png.save("app/assets/images/blog/experience/genetic_best.png")
			asset_data_uri("blog/experience/genetic_best.png")
		end
		
		 %>

<% @bests_of_populations.each do |person| %>
	<%= image_tag genes_to_uri(person[:genes]) %><br/><br/>
<% end %>