<%= container do %>
	<%= row do %>
		<%= three_span :element => :sidebar do %>
			1
		<% end %>

		<%= nine_span :element => :article do %>
			
			
			<%
				
					









				# eléments de base
				#normalement ouvert
				def switch_no p = true, *i
					{
						[false, false] => false,
						[false, true] => false,
						[true, false] => false,
						[true, true] => true
					}[[p, *i]]
				end
				
				#normalement closed
				def switch_nc p = true, *i 
					{
						[false, false] => false,
						[false, true] => false,
						[true, false] => true,
						[true, true] => false
					}[[p, *i]]
				end
				
				def split p = true
					{
						false => [false]*2
					}[p]
				end
				
				def combine *p
					p ||= Array.new 2, true
					
					{
						[false, false] => false,
						[false, true] => true,
						[true, false] => true,
						[true, true] => true
					}[p]
				end
				
				
				
				# portes logiques
				def yes p, i
					switch_no p, i
				end
				
				def no p, i
					switch_nc p, i
				end
				
				def d_and p, *i
					f = switch_no p, i[0]
					switch_no f, i[1]
				end
				
				def d_or p, *i
					f = Array.new 2
					
					f[0] = switch_no p, i[0]
					f[1] = switch_no p, i[1]
					combine *f
				end
				
				def not_and p, *i
					f = Array.new 2
					
					f[0] = switch_nc p, i[0]
					f[1] = switch_nc p, i[1]
					combine *f
				end
				
				def not_or p, *i
					f = switch_nc p, i[0]
					switch_nc f, i[1]
				end
				
				def xor p, *i
					f = Array.new 2
					
					f[0] = switch_nc p, i[0]
					f[0] = switch_no f[0], i[1]
					
					f[1] = switch_no p, i[0]
					f[1] = switch_nc f[1], i[1]
					
					combine *f
				end
				
				
				
				# additionneurs
				def half_adder *i
					f = Array.new 2
					
					o = xor true, *i
					r = d_and true, *i
					
					return o, r
				end
				
				def adder *i
					tmp_o, tmp_r1 = half_adder i[0], i[1]
					o, tmp_r2 = half_adder tmp_o, i[2]
					
					r = d_or true, tmp_r1, tmp_r2
					
					return o, r
				end
				
				def parallel_adder_4bit *i
					o = Array.new 4
					
					#premier nombre 4 bit == i[0..3]
					#second nombre 4 bit == i[4..7]
					#premiere retenue == i[8]
										
					o[3], r = adder i[3], i[7], i[8]
					o[2], r = adder i[2], i[6], r
					o[1], r = adder i[1], i[5], r
					o[0], r = adder i[0], i[4], r 
					
					return r, *o
				end
			%>
			
			
			<%
			#truc d'affichages
			def to_4bit i
				("%04d" % i.to_s(2)).split(//).map{ |x| x == "1" }
			end
			
			def from_4bit i
				i.map{|x| x ? "1" : "0"}.join.to_i(2)
			end
			%>
			
			<h3>or</h3>
			true true false false<br/>
			<%= d_or true, true, true %>
			<%= d_or true, true, false %>
			<%= d_or true, false, false %>
			<%= d_or false, true, true %>
			
			<hr/>
			
			<h3>half adder</h3>
			[false, false] [true, false] [false, true]<br/>
			<%= half_adder(false, false).inspect %>
			<%= half_adder(false, true).inspect %>
			<%= half_adder(true, true).inspect %>
			
			<hr/>
			
			<h3>adder</h3>
			[false, false] [true, false] [false, true] [true, false] [false, true] [true, true]<br/>
			<%= adder(false, false, false).inspect %>
			<%= adder(false, true, false).inspect %>
			<%= adder(true, true, false).inspect %>
			<%= adder(true, false, false).inspect %>
			<%= adder(true, false, true).inspect %>
			<%= adder(true, true, true).inspect %>
			
			<hr/>
			
			<h3>parallel adder 4bit</h3>
			<%	lookup = Hash.new{ |h, k| h[k] = to_4bit k }
				r_lookup = Hash.new{ |h, k| h[k] = from_4bit k }# need une fonction rfetch pour les hash -> idée pour r_extend
			
				setup_2 = (lookup[1] + lookup[1]).flatten << false
				setup_5 = (lookup[2] + lookup[3]).flatten << false
				setup_7 = (lookup[2] + lookup[5]).flatten << false
				setup_15 = (lookup[9] + lookup[6]).flatten << false
				setup_24 = (lookup[15] + lookup[9]).flatten << false
				setup_31 = (lookup[15] + lookup[15]).flatten << true
				
			%>
			
			2 5 7 15 24 31<br/>
			<%= r_lookup[parallel_adder_4bit(*setup_2)] %>
			<%= r_lookup[parallel_adder_4bit(*setup_5)] %>
			<%= r_lookup[parallel_adder_4bit(*setup_7)] %>
			<%= r_lookup[parallel_adder_4bit(*setup_15)] %>
			<%= r_lookup[parallel_adder_4bit(*setup_24)] %>
			<%= r_lookup[parallel_adder_4bit(*setup_31)] %>
			
			
			
			<hr/>
			<h1>Using class</h1>
			<hr/>
			
			<h3>parallel adder 4bit</h3>
			<%	lookup = Hash.new{ |h, k| h[k] = to_4bit k }
				r_lookup = Hash.new{ |h, k| h[k] = from_4bit k }# need une fonction rfetch pour les hash -> idée pour r_extend
			
				setup_2 = (lookup[1] + lookup[1]).flatten << false
				setup_5 = (lookup[2] + lookup[3]).flatten << false
				setup_7 = (lookup[2] + lookup[5]).flatten << false
				setup_15 = (lookup[9] + lookup[6]).flatten << false
				setup_24 = (lookup[15] + lookup[9]).flatten << false
				setup_31 = (lookup[15] + lookup[15]).flatten << true
				
			%>
			
			2 5 7 15 24 31<br/>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_2)] %>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_5)] %>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_7)] %>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_15)] %>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_24)] %>
			<%= r_lookup[Adder.new.parallel_adder_4bit(*setup_31)] %>
			
			
		<% end %>
	<% end %>
<% end %>


