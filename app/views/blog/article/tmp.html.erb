<%= container_tag do %>
	<%= row_tag do %>
		<%= col_3_tag :element => :sidebar do %>
			1
		<% end %>

		<%= col_9_tag :element => :article do %>
			
      <i>Avec rails 3, les strings sont par défaut "unsafe". C'est très bien, mais pour les clés I18n, qui viennet d'un environnement controlé, donc safe, il existe pas une technique à la pisse des bois pour éviter le fastueux ".html_safe" ?</i>
      
      <h2>I18n + html_safe?</h2>
      
      <p>
        Je connais deux techniques pour éviter de répéter <%= coderay({inline: true}, "html_safe") %>, et c'est ce qu'on va voir aujourd'hui.<br/>
        Au fait, ça va vous ? La famille, bien ?
      </p>
      
      <h3>Clés I18n</h3>
      
      <p>
        La première solution, la plus classique, consiste à ajouter <%= coderay({inline: true}, "_html") %> ou <%= coderay({inline: true}, ".html") %> à la suite des clés qui contiennent du html.
      </p>
      
      <p>
        Voici ls fichier <%= coderay({inline: true}, "yml") %> que nous allons utiliser tout au long de cet article :
      </p>
      
      <%= coderay lang: :yml do %>
previous: "&larr; Previous"
next: "Next &rarr;"

previous_html: "&larr; Previous"
next_html: "Next &rarr;"

# or
previous:
  html: "&larr; Previous"
next:
  html: "Next &rarr;"
      <% end %>
      
      <p>
        Et grâce à quelque "black magic", le <%= coderay({inline: true}, "html_safe") %> va être appliqué tout seul sur les clés qu'on aura marqué "html". La démo qui va bien :
      </p>
      
      <%= coderay do %>
?> helper.t :previous
=> "&larr; Previous"

?> helper.t :previous_html
=> "← Previous"
      <% end %>
      
      <h3>Enter the Magic</h3>
      
      <p>
        Comme on est des petits curieux, on est allé voir comment fonctionnait le helper <%= coderay({inline: true}, "t") %> (ou <%= coderay({inline: true}, "translate") %>).
      </p>
      
      <%= coderay do %>
def translate(key, options = {})
  # ... 
  if html_safe_translation_key?(key)
    # ...
    translation.respond_to?(:html_safe) ? translation.html_safe : translation
  else
    I18n.translate(scope_key_by_partial(key), options)
  end
end
      <% end %>
      
      <p>
        Donc, ce helper va appliquer le html_safe en fonction de ce que lui indique la méthode <%= coderay({inline: true}, "html_safe_translation_key?") %>. C'est sur cette méthode que nous allons concentrer nos efforts à présent.
      </p>
      
      <h3>Monkey Patching</h3>
      
      <p>
        Afin de déclarer TOUTES les clés du monde qu'on pourrait vouloir utiliser comme <%= coderay({inline: true}, "html_safe") %>, on peut ovveriider la méthode <%= coderay({inline: true}, "html_safe_translation_key?") %> afin qu'elle renvoie toujours <%= coderay({inline: true}, "true") %>.
      </p>
      
      <%= coderay do %>
module ActionView
  module Helpers
    module TranslationHelper
      private
      def html_safe_translation_key?(key)
        true
      end
    end
  end
end
      <% end %>
      
      <h3>Warnings</h3>
      
      <p>
        Quelques avertissements avant de vous lâcher, penser bien à utiliser le helper <%= coderay({inline: true}, "t") %>, et pas la méthode <%= coderay({inline: true}, "I18n.t") %> directement.<br/>
        C'est aussi assez déconseillé d'overrider directement la méthode <%= coderay({inline: true}, "I18n.t") %> à cause des arguments qu'on peut passer à certaines clés. Je vous met une démo pour bien comprendre :
      </p>
      
      <%= coderay lang: :yml do %>
name: "<strong>Nom</strong> : %{name}"
      <% end %>
      
      <% coderay do %>
?> bdd_value = "Thomas <span>El</span> Petrachi"

# with helper override
?> helper.t :name, name: bdd_value
=> "<strong>Nom</strong> : Thomas &lt;span&gt;El&lt;/span&gt; Petrachi"

# with I18n override
?> I18n.t :name, name: bdd_value
=> "<strong>Nom</strong> : Thomas <span>El</span> Petrachi" # This is XSS injection, html_safe has failed
      <% end %>
      
      <h3>Require</h3>
      
      <p>
        Aussi, pour que votre override fonctionne, pensez à <%= coderay({inline: true}, "require") %> le fichier dans lequel vous avez écrit votre monkey patch. Simplement ajouter le dossier du fichier dans la <%= coderay({inline: true}, "config.autoload_paths") %> ne fonctionnera pas.<br/>
        Pour faire ça, vous pouvez ajouter un fichier <i>config/initializers/require.rb</i> :
      </p>
      
      <%= coderay do %>
Dir[File.join(Rails.root, "app", "extends", "**", "*.rb")].each{ |path| require path }    
      <% end %>
      
      <h3>Conclusion</h3>
      
      <p>
        C'est déjà fini les amis :(<br/>
        Mais on se retrouve bientôt pour parler de plein d'autres trucs, et en attendant, fini les ennuis de <%= coderay({inline: true}, "html_safe") %> sur nos propores clés !
      </p>			
		<% end %>
	<% end %>
<% end %>


