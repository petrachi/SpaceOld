<%= container do %>
	<%= row do %>
		<%= three_span :element => :sidebar do %>
			1
		<% end %>

		<%= nine_span :element => :article do %>
		
			<h2>Positionnement relatif d'un sprite</h2>
			
			<p>summary : <i>Le positionnement dans un sprite (cette technique CSS qui permet de condenser toutes ses images dans un seul fichier)</i> est souvent exprimé en 'px', mais nous pouvons améliorer la flexibilité des sprites en utilisant un positionnement en '%'</p>
			
			<p>
				Prérequis pour une lecture sereine : connaitre Sass, Compass et la technique des sprites.
			</p>
			for me : mettre sass et compass en 'ressources'
			<p>
				Sass, allié avec Compass permettent facilement de créer et d'utiliser les sprites dans votre appli web, mais, avec l'émergence des icon-font (RTFMN - ici lien vers font-awesome), la rigidité du modéle des sprites me dérange.
			</p>
			
			<p>
				Nous ne pouvons pas agir simplement sur les propriétés des texte, via le CSS, d'une image géré en sprite, à l'inverse de ce que permet une icon-font. Mais je vous propose une technique qui permettra de se débarrasser de la contrainte de taille des images d'un sprite.
			</p>
			
			<h3>
				Création d'un sprite
			</h3>
			
			<p>
				Je vous laisse lire la doc (mettre lien vers doc sprite de compass) mais voici le code le plus simple qui permet de créer un sprite avec Compass
			</p>
			
			for me : mettre code sprite simple
			
			
			for me : mettre code css pour une image dans le sprite
			
			
			<p>
				Le code CSS généré utilise des valeurs en pixels pour le positionnement et la taille du background. Ce qui pose de légers problémes si je m'aventure à changer les propri!tés de taille de l'émément. (for me : link to expériment '4 tailles de sprite' en mode 'px')
			</p>
			
			<h3>
				Repositionnement relatif
			</h3>
			
			<p>
				Imaginons que le positionnement soit exprimé en '%', et que la largeur du sprite soit égale à 100% de la largeur de l'élément, alors, à condition de respecter les proportions, nous serions en mesure d'imposer n'importe quelle taille à nos images spritées.
			</p>sur le sprite ci
			
			<p>
				Attention ! Pour pouvoir utiliser cette technique sans risques, il faut que la taille (hauteur et largeur) des images du sprite soient identiques !
			</p>
			
			for me : mettre code du mixin
			
			<p>
				Et voilà ! Ce mixin fait maison va recalculer les positions de chaque image et les exprimer en '%'. Mais si vous êtes fins observateurs, vous verrez que les calculs sont fait dans la méthode 'x', qui nous donne l'occasion d'un petit aparté.
			</p>
			
			<h3>
				Du ruby dans Sass
			</h3>
			
			<p>
				Il est relativement simple d'étendre Sass avec ses propres fonctions, une fois qu'on sait où écrire le code et compris les structures de données à retourner.
			</p>
			
			for me : mettre code d'extend
			
			<p>
				Voilà, l'intérieur est en ruby, l'appel est dans Sass, le retour se fait dans Sass. Ce bout de code est sorti d'un fichier "x", dans le dossier "lib" à la racine de mon app rails. Et j'avoue que je suis bien plus à l'aise pour manipuler des données en ruby qu'en Sass.
			</p>
			
			<h3>
				Du nain au géant, mon srite est infini !
			</h3>
			
			<p>
				La magie opère sur le sprite en démo juste en dessous. Grâce à une petite boucle afin de définir un set de tailles personnalisées, j'affiche mes icônes dans toute les tailles aussi facilement qu'avec une icon-font !
			</p>
			
			for me : code boucle taille prédéfinies (+ mixin je crois)
			
			for me : demo sprite %
			
			<h3>
				Conclusion
			</h3>
			
			<p>
				J'adore re-positionner mes sprite en '%', afin de gagner en flexibilité et en maintenabilité (1 seul fichier de sprite à gérer). L'inconvénient c'est que les utilisateurs doivent toujours télécharger l'image en taille maximale, et qu'il est généralement déconseillé de retailler ses images via du CSS (questions de performances surtout).
			</p>
			
			<p>
				Voilà, j'espère que vous vous êtes bien amusé (et aussi que ça vous servira un peu), et je vous fais des bisous !
			</p>
			
			
			
			---
			
			<br/>
			<br/>
			<br/>
			<br/>
			
			<% Object.class_eval %q{
				module Sass::Script::Functions
				
				
						remove_method :custom_percentage if defined? custom_percentage

				def custom_percentage(value, total)
				    value = value.to_i
				    total = total.to_i

				    percentage = value * 100.0 / total

				    Sass::Script::String.new("#{ percentage }%")
				  end
				  declare :int, :args => [:string]
				end

			}	
			%>
			
			<%= scss %q{
				
				$sc-icon-sprites: sprite-map("blog/experiment/sc-icon/*.png");
				.sc-icon-sprite{
				    background-image: inline-sprite($sc-icon-sprites);
				}
				@include sprites($sc-icon-sprites, protoss terran zerg);
				@each $sprite in sprite_names($sc-icon-sprites) {
					.sc-icon-#{$sprite}{
						@extend .sc-icon-sprite;
						
						display: inline-block;
						width: image-width(sprite_file($sc-icon-sprites, $sprite));
						height: image-height(sprite_file($sc-icon-sprites, $sprite));
						
						
					}
				}
				
				/*
				équivaut à ça : 
				
				$v-icon-sprite-dimensions: true;
				
				@import "v-icon/*.png";
				@include all-v-icon-sprites;
				
				
				*/
				
				
				
				
				
				/* start first mixin resize */
				@mixin resize-sprite($width) {

					width: $width;
					height: $width;
					
					box-shadow: inset 0 0 $width/2 black;
				}
				
				@each $sprite in sprite_names($sc-icon-sprites) {

					.sc-icon-#{$sprite}{
						@include resize-sprite(66px);
					}

					.sc-icon-#{$sprite}.icon-x2{
						@include resize-sprite(132px);
					}


					.sc-icon-#{$sprite}.icon-x3{
						@include resize-sprite(198px);
					}


					.sc-icon-#{$sprite}.icon-x4{
						@include resize-sprite(264px);
					}
				}
				
				
				
				
				
				
				
				
				
				
				/*
				mixin reposition
				*/
				
				

				@mixin sprite-reposition-percent($map, $space-between){
					$mapHeight: image-height(sprite-path($map)) - $space-between;

					@each $sprite in sprite_names($map) {
						$spriteHeight: nth(sprite-position($map, $sprite), 2);
						$spriteHeight: -$spriteHeight;

						.#{sprite_map_name($map)}-#{$sprite}{
							background-size: 100%;
							background-position: 50% custom_percentage($spriteHeight, $mapHeight);

							display: inline-block;
						}


					}
				}

				@include sprite-reposition-percent($sc-icon-sprites, 240px);
				
				
				
				
				
				
				/* for experiment */
				#sc-demo{
					line-height: 0;
					
					.row{
						width: 864px;
					}
				}
			} %>
			
			
			
			<i class="sc-icon-protoss icon-x3"></i>
			
			<i class="sc-icon-terran"></i>
			
			<i class="sc-icon-zerg"></i>
			
			<br/><br/>
			
			<i class="sc-icon-zerg"></i>
			
			<i class="sc-icon-zerg icon-x2"></i>
			
			<i class="sc-icon-zerg icon-x3"></i>
			
			<i class="sc-icon-zerg icon-x4"></i>
			
			<br/><br/>
			
			
			
			
			
			<br/><br/>
			
			
			
			
			
		<% end %>
	<% end %>
<% end %>


<%= container :id => :'sc-demo' do %>
	<%= row do %>
	
		<%= three_span do %>
			<%= raw '<i class="sc-icon-zerg"></i>' * 16 %>
		<% end %>
		
		<%= three_span do %>
			<i class="sc-icon-protoss icon-x4"></i>
		<% end %>
		
		<%= three_span do %>
			<%= raw '<i class="sc-icon-terran icon-x2"></i>' * 4 %>
		<% end %>
	
	<% end %>
<% end %>
