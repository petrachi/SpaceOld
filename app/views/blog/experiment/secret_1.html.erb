<%= one_col_container do %>
	
	<%
	  def point_on_sphere n
	    n = n.to_f
	    pts = []

	    inc = Math::PI * (3 - Math::sqrt(5))
	    off = 2 / n

	    (0...n).each do |k|
	      y = k * off - 1 + (off / 2)    
	      r = Math::sqrt(1 - y**2)
	      phi = k * inc

	      x_phi = Math::PI/2 - Math::acos(y)

	      pts << [1.0, phi, x_phi]
	    end

	    pts
	  end

	  n = 589
	  r = 232
	  h = 10

	  points = point_on_sphere(n)
	%>
	
	<%= scss %Q{
		@include keyframes(planet-rotation){
			from{
				@include transform(rotateZ(23deg) rotateY(360deg)); 
			}
		    to {
				-webkit-transform: rotateZ(23deg) rotateY(0deg); 
			}
		}
		
		.planet-container{
			height: #{ r * 2 }px;
			width: #{ r * 2 }px;
		    margin: 1em auto;
			
			.planet{ 
		    	height: 100%;
			    width: 100%;
			    position: relative;

			    @include transform-style(preserve-3d);
			    @include animation(planet-rotation 270s linear infinite);
			
				.province{  
					height: #{ h }px; 
				    width: #{ h }px;

				    box-shadow: 0 0 0 #{ (h/2) - 1 }px rgba(0, 0, 0, .6) inset;
				    background-color: $primary-color;
					
				    @include backface-visibility(hidden);
				    @include transition(all .15s linear);
					
				    position: absolute;
				    left: #{ r - (h/2) }px;
				    top: #{ r - (h/2) }px;
				}
			}
		}
	} %>



<div class="planet-container">
  <div class="planet">
    <% points.each do |(p, ϕ, θ)| %>
      <div class="province"
        style="-webkit-transform: rotateY(<%= ϕ %>rad) rotateX(<%= θ %>rad) translateZ(<%= p * r %>px);" />
      </div>
    <% end %>
  </div>
</div>

<% end %>
