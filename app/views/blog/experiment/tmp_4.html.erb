<div class="display-none">
<style>
#outer-barG{
height:37px;
width:128px;
border:2px solid #000000;
overflow:hidden;
background-color:#FFFFFF}

.bar-lineG{
background-color:#000000;
float:left;
width:18px;
height:120px;
margin-right:24px;
margin-top:-28px;
-moz-transform:rotate(45deg);
-webkit-transform:rotate(45deg);
-ms-transform:rotate(45deg);
-o-transform:rotate(45deg);
transform:rotate(45deg);
}

.bar-animationG{
margin-left:168px;
width:168px;
-moz-animation-name:bar-animationG;
-moz-animation-duration:1.95s;
-moz-animation-iteration-count:infinite;
-moz-animation-direction:linear;
-webkit-animation-name:bar-animationG;
-webkit-animation-duration:1.95s;
-webkit-animation-iteration-count:infinite;
-webkit-animation-direction:linear;
-ms-animation-name:bar-animationG;
-ms-animation-duration:1.95s;
-ms-animation-iteration-count:infinite;
-ms-animation-direction:linear;
-o-animation-name:bar-animationG;
-o-animation-duration:1.95s;
-o-animation-iteration-count:infinite;
-o-animation-direction:linear;
animation-name:bar-animationG;
animation-duration:1.95s;
animation-iteration-count:infinite;
animation-direction:linear;
}

#front-barG{
}

@-moz-keyframes bar-animationG{
0%{
margin-left:155px;
margin-top:-18px}

100%{
margin-left:-128px;
margin-top:-18px}

}

@-webkit-keyframes bar-animationG{
0%{
margin-left:155px;
margin-top:-18px}

100%{
margin-left:-128px;
margin-top:-18px}

}

@-ms-keyframes bar-animationG{
0%{
margin-left:155px;
margin-top:-18px}

100%{
margin-left:-128px;
margin-top:-18px}

}

@-o-keyframes bar-animationG{
0%{
margin-left:155px;
margin-top:-18px}

100%{
margin-left:-128px;
margin-top:-18px}

}

@keyframes bar-animationG{
0%{
margin-left:155px;
margin-top:-18px}

100%{
margin-left:-128px;
margin-top:-18px}

}

</style>
<div id="outer-barG">
<div id="front-barG" class="bar-animationG">
<div id="barG_1" class="bar-lineG">
</div>
<div id="barG_2" class="bar-lineG">
</div>
<div id="barG_3" class="bar-lineG">
</div>
</div>
</div> - See more at: http://cssload.net/#sthash.OZ2unjHx.dpuf






<style>
.windows8 {
position: relative;
width: 90px;
height:90px;
}

.windows8 .wBall {
position: absolute;
width: 86px;
height: 86px;
opacity: 0;
-moz-transform: rotate(225deg);
-moz-animation: orbit 7.15s infinite;
-webkit-transform: rotate(225deg);
-webkit-animation: orbit 7.15s infinite;
-ms-transform: rotate(225deg);
-ms-animation: orbit 7.15s infinite;
-o-transform: rotate(225deg);
-o-animation: orbit 7.15s infinite;
transform: rotate(225deg);
animation: orbit 7.15s infinite;
}

.windows8 .wBall .wInnerBall{
position: absolute;
width: 11px;
height: 11px;
background: #000000;
left:0px;
top:0px;
-moz-border-radius: 11px;
-webkit-border-radius: 11px;
-ms-border-radius: 11px;
-o-border-radius: 11px;
border-radius: 11px;
}

.windows8 #wBall_1 {
-moz-animation-delay: 1.56s;
-webkit-animation-delay: 1.56s;
-ms-animation-delay: 1.56s;
-o-animation-delay: 1.56s;
animation-delay: 1.56s;
}

.windows8 #wBall_2 {
-moz-animation-delay: 0.31s;
-webkit-animation-delay: 0.31s;
-ms-animation-delay: 0.31s;
-o-animation-delay: 0.31s;
animation-delay: 0.31s;
}

.windows8 #wBall_3 {
-moz-animation-delay: 0.62s;
-webkit-animation-delay: 0.62s;
-ms-animation-delay: 0.62s;
-o-animation-delay: 0.62s;
animation-delay: 0.62s;
}

.windows8 #wBall_4 {
-moz-animation-delay: 0.94s;
-webkit-animation-delay: 0.94s;
-ms-animation-delay: 0.94s;
-o-animation-delay: 0.94s;
animation-delay: 0.94s;
}

.windows8 #wBall_5 {
-moz-animation-delay: 1.25s;
-webkit-animation-delay: 1.25s;
-ms-animation-delay: 1.25s;
-o-animation-delay: 1.25s;
animation-delay: 1.25s;
}

@-moz-keyframes orbit {
0% {
opacity: 1;
z-index:99;
-moz-transform: rotate(180deg);
-moz-animation-timing-function: ease-out;
}

7% {
opacity: 1;
-moz-transform: rotate(300deg);
-moz-animation-timing-function: linear;
-moz-origin:0%;
}

30% {
opacity: 1;
-moz-transform:rotate(410deg);
-moz-animation-timing-function: ease-in-out;
-moz-origin:7%;
}

39% {
opacity: 1;
-moz-transform: rotate(645deg);
-moz-animation-timing-function: linear;
-moz-origin:30%;
}

70% {
opacity: 1;
-moz-transform: rotate(770deg);
-moz-animation-timing-function: ease-out;
-moz-origin:39%;
}

75% {
opacity: 1;
-moz-transform: rotate(900deg);
-moz-animation-timing-function: ease-out;
-moz-origin:70%;
}

76% {
opacity: 0;
-moz-transform:rotate(900deg);
}

100% {
opacity: 0;
-moz-transform: rotate(900deg);
}

}

@-webkit-keyframes orbit {
0% {
opacity: 1;
z-index:99;
-webkit-transform: rotate(180deg);
-webkit-animation-timing-function: ease-out;
}

7% {
opacity: 1;
-webkit-transform: rotate(300deg);
-webkit-animation-timing-function: linear;
-webkit-origin:0%;
}

30% {
opacity: 1;
-webkit-transform:rotate(410deg);
-webkit-animation-timing-function: ease-in-out;
-webkit-origin:7%;
}

39% {
opacity: 1;
-webkit-transform: rotate(645deg);
-webkit-animation-timing-function: linear;
-webkit-origin:30%;
}

70% {
opacity: 1;
-webkit-transform: rotate(770deg);
-webkit-animation-timing-function: ease-out;
-webkit-origin:39%;
}

75% {
opacity: 1;
-webkit-transform: rotate(900deg);
-webkit-animation-timing-function: ease-out;
-webkit-origin:70%;
}

76% {
opacity: 0;
-webkit-transform:rotate(900deg);
}

100% {
opacity: 0;
-webkit-transform: rotate(900deg);
}

}

@-ms-keyframes orbit {
0% {
opacity: 1;
z-index:99;
-ms-transform: rotate(180deg);
-ms-animation-timing-function: ease-out;
}

7% {
opacity: 1;
-ms-transform: rotate(300deg);
-ms-animation-timing-function: linear;
-ms-origin:0%;
}

30% {
opacity: 1;
-ms-transform:rotate(410deg);
-ms-animation-timing-function: ease-in-out;
-ms-origin:7%;
}

39% {
opacity: 1;
-ms-transform: rotate(645deg);
-ms-animation-timing-function: linear;
-ms-origin:30%;
}

70% {
opacity: 1;
-ms-transform: rotate(770deg);
-ms-animation-timing-function: ease-out;
-ms-origin:39%;
}

75% {
opacity: 1;
-ms-transform: rotate(900deg);
-ms-animation-timing-function: ease-out;
-ms-origin:70%;
}

76% {
opacity: 0;
-ms-transform:rotate(900deg);
}

100% {
opacity: 0;
-ms-transform: rotate(900deg);
}

}

@-o-keyframes orbit {
0% {
opacity: 1;
z-index:99;
-o-transform: rotate(180deg);
-o-animation-timing-function: ease-out;
}

7% {
opacity: 1;
-o-transform: rotate(300deg);
-o-animation-timing-function: linear;
-o-origin:0%;
}

30% {
opacity: 1;
-o-transform:rotate(410deg);
-o-animation-timing-function: ease-in-out;
-o-origin:7%;
}

39% {
opacity: 1;
-o-transform: rotate(645deg);
-o-animation-timing-function: linear;
-o-origin:30%;
}

70% {
opacity: 1;
-o-transform: rotate(770deg);
-o-animation-timing-function: ease-out;
-o-origin:39%;
}

75% {
opacity: 1;
-o-transform: rotate(900deg);
-o-animation-timing-function: ease-out;
-o-origin:70%;
}

76% {
opacity: 0;
-o-transform:rotate(900deg);
}

100% {
opacity: 0;
-o-transform: rotate(900deg);
}

}

@keyframes orbit {
0% {
opacity: 1;
z-index:99;
transform: rotate(180deg);
animation-timing-function: ease-out;
}

7% {
opacity: 1;
transform: rotate(300deg);
animation-timing-function: linear;
origin:0%;
}

30% {
opacity: 1;
transform:rotate(410deg);
animation-timing-function: ease-in-out;
origin:7%;
}

39% {
opacity: 1;
transform: rotate(645deg);
animation-timing-function: linear;
origin:30%;
}

70% {
opacity: 1;
transform: rotate(770deg);
animation-timing-function: ease-out;
origin:39%;
}

75% {
opacity: 1;
transform: rotate(900deg);
animation-timing-function: ease-out;
origin:70%;
}

76% {
opacity: 0;
transform:rotate(900deg);
}

100% {
opacity: 0;
transform: rotate(900deg);
}

}

</style>
<div class="windows8">
<div class="wBall" id="wBall_1">
<div class="wInnerBall">
</div>
</div>
<div class="wBall" id="wBall_2">
<div class="wInnerBall">
</div>
</div>
<div class="wBall" id="wBall_3">
<div class="wInnerBall">
</div>
</div>
<div class="wBall" id="wBall_4">
<div class="wInnerBall">
</div>
</div>
<div class="wBall" id="wBall_5">
<div class="wInnerBall">
</div>
</div>
</div> - See more at: http://cssload.net/#sthash.OZ2unjHx.dpuf



</div>

<% 
@searched_image = ChunkyPNG::Image.from_file("app/assets/images/blog/experiment/octopus_transparent.png")


@generations = 1_500
@mutation_rate = 1.0 / 1

score_increment = 6.6
%>

<% 	
	# --- setup
	
	@searched_genes = @searched_image.pixels
	@availables_pixels = @searched_genes.uniq
	
	
	
	@evolution_tree = []
	
	# -- hill climbing
	
	def create_gene
		@availables_pixels.sample
	end
	
	def create_person genes = []
		if genes.blank?
			@searched_genes.size.times{ genes << create_gene }
		end
		
		{
			:genes => genes.clone,
			:muted => genes.clone,
			:score => 0,
			:fit => 0
		}
	end
	
	def evaluate_person person
		score = 0
		person[:genes].zip(@searched_genes).each_with_index do |(gene, searched_gene), index|
			if gene == searched_gene
				score += 1
			elsif rand < @mutation_rate					
				person[:muted][index] = create_gene
			end
		end
		
		person[:score] = score
	end
	
	def mutate person
		create_person person[:muted]
	end
	
	GC.enable
	first_timer = Time.now
	timer = Time.now
	
	
	p "Start Hill Climbing - #{ @generations } Generations - Complexity: #{ @searched_genes.size } genes + #{ @availables_pixels.size } colors"
	
	score = 0
	score_increment = 6.6
	
	@population_of_one = create_person
	@generations.times do |generation|
		evaluate_person @population_of_one
		
		mutation = mutate @population_of_one
		evaluate_person mutation
		
		if (@population_of_one[:score] * 100 / @searched_genes.size) >= score
			score += score_increment
			
			GC.start
			
			puts "Generation #{ generation + 1 } - Score #{ @population_of_one[:score] } (#{ @population_of_one[:score] * 100 / @searched_genes.size }%) - time elapsed : #{ Time.now - timer } (this generation)"
			timer = Time.now
			
			@evolution_tree << [@population_of_one, generation]
			
			break if score >= 100
		end
		
		if @population_of_one[:score] == @searched_genes.size
			p "Perfect solution found - Exit at generation #{ generation }"
			@evolution_tree << [@population_of_one, generation]
			break 
		end
		
		if mutation[:score] > @population_of_one[:score]
			@population_of_one = create_person mutation[:genes]
		else
			@population_of_one = create_person @population_of_one[:genes]
		end
	end
	
	p "End Hill Climbing - Total time : #{ Time.now - first_timer }"
	# --- hill climbing end
	
		
	def asset_data_uri path
		asset = Rails.application.assets.find_asset path

	  	throw "Could not find asset '#{path}'" if asset.nil?

	  	base64 = Base64.encode64(asset.to_s).gsub(/\s+/, "")
	  	"data:#{asset.content_type};base64,#{Rack::Utils.escape(base64)}"
	end
	
	def genes_to_uri genes
		png = ChunkyPNG::Image.new(@searched_image.width, @searched_image.height, genes)
		png.save("app/assets/images/blog/experiment/genetic_best.png")
		asset_data_uri("blog/experiment/genetic_best.png")
	end

%>

<%= six_cols_container :collection => @evolution_tree, :spans => {:class => :'hill-climbing display-none'} do |person, generation| %>
	<span class="gen display-none" style="margin:1em;">
	Generation <%= generation + 1 %><br/>
	Score <strong><%= person[:score] %></strong> (<%= person[:score] * 100 / @searched_genes.size %>%)
	
	<% 
	percent = person[:score] * 100 / @searched_genes.size
	reverse_p = 100 - percent
		r = 255 * reverse_p/100.0
		v = 255 * percent/100.0
		
		
		
		function Color(r,g,b) {
			this.r = r;
			this.g = g;
			this.b = b;
			this.coll = new Array(r,g,b);
			this.valid = cVerify(this.coll);
			this.text = cText(this.coll);
			this.bg = cText(this.coll);
		}
		
		function mixPalette() {
			var steps = 10;
			var count = steps + 1;
			palette[0] = new Color(ends[0].r,ends[0].g,ends[0].b);
			palette[count] = new Color(ends[1].r,ends[1].g,ends[1].b);
			for (i = 1; i < count; i++) {
				var r = (ends[0].r + (step[0] * i));
				var g = (ends[0].g + (step[1] * i));
				var b = (ends[0].b + (step[2] * i));
					palette[i] = new Color(r,g,b);
			}
			for (j = count + 1; j < 12; j++) {
				palette[j].text = '';
				palette[j].bg = 'white';
			}
		}
		
		
		
	#	color : from our red
	#	color : to dogerblue(?) 1E90FF
	# 
	# see color blend : http://www.w3schools.com/tags/ref_colormixer.asp
	#  or http://meyerweb.com/eric/tools/color-blend/
	# 
	#color rainbow : http://krazydad.com/tutorials/makecolors.php
	# 
	# these colors are to add in r_kit variables
	# complementary : #2B70B5
	# analogous : #B5702B
	%>
	
	<div style="background-color: rgb(<%= r.to_i %>, <%= v.to_i %>, 0);">
	<%= image_tag genes_to_uri(person[:genes]) %>
	</div>
	
	</span>
	<span class="loader">
		load
	</span>
<% end %>

<script type="text/javascript">

	function hasClass(ele,cls) {
		return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
	}
	function addClass(ele,cls) {
		if (!this.hasClass(ele,cls)) ele.className += " "+cls;
	}
	function removeClass(ele,cls) {
		if (hasClass(ele,cls)) {
			var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
			ele.className=ele.className.replace(reg,' ');
		}
	}
	
		
	var timers = [10, 138, 163, 146, 157, 152, 196, 195, 178, 215, 210, 279, 348, 362, 634, 1592];
	
	var timer = 0;
	
 	var elems = document.getElementsByClassName("hill-climbing");
	for(var timeIndex = 0; timeIndex < elems.length; ++timeIndex)
	{
		
		
		
		var gen = elems[timeIndex].getElementsByClassName( "gen" )[0];
		var load = elems[timeIndex].getElementsByClassName( "loader" )[0];
		
		setTimeout(removeClass.bind(this, elems[timeIndex], "display-none"), timer);
		console.log("remove all (display load) " + timeIndex + " at " + timer)
		
		timer = timer + timers[timeIndex]
		
		console.log("add gen + cache load " + timeIndex + " at " + timer)
		
		setTimeout(removeClass.bind(this, gen, "display-none"), timer);
		setTimeout(addClass.bind(this, load, "display-none"), timer);
		
		
	}
	
	
	
</script>
